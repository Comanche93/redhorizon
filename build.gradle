/* 
 * Copyright 2007, Emanuel Rabina (http://www.ultraq.net.nz/)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Global configuration
allprojects {
	project.group = 'nz.net.ultraq.redhorizon'
}

// Root project configuration
//project.name        = 'Red Horizon'
project.description = 'Recreating the original 2D Command & Conquer games for a modern programming community'

// Subproject configuration
subprojects {
	apply plugin: 'groovy'
	apply plugin: 'maven'
	apply from: 'https://raw.githubusercontent.com/ultraq/gradle-support/1.3.2/gradle-support.gradle'
	apply from: 'https://raw.githubusercontent.com/ultraq/gradle-support/1.3.2/maven-support.gradle'

	project.year = '2007'
	project.sourceCompatibility = '1.8'

	repositories {
		flatDir {
			dirs 'Libraries'
		}
	}

	dependencies {
		compile 'org.codehaus.groovy:groovy:2.4.7'
	}
}

/**
 * Create Javadocs over the entire project.
 */
/*task createJavadocs(
	description: 'Create Javadocs for the entire project',
	type: Javadoc) {

	dependsOn = []
	source subprojects.sourceSets.main.allJava
	classpath      = files(subprojects.sourceSets.main.compileClasspath)
	destinationDir = file("${project.javadocDir}")
	title          = "${project.name} ${project.version} API"
}*/

/**
 * Copy JARs to the project directory.
 */
/*task copyJars(
	description: 'Copy subproject JARs to the project directory') {

	dependsOn = [subprojects.jar]
	subprojects.each { subproject ->
		inputs.files subproject.jar.outputs.files
		outputs.file subproject.jar.archiveName
	}
	doLast {
		ant.copy(todir: '.') {
			subprojects.each { subproject ->
				fileset(dir: subproject.libsDir, includes: '*.jar')
			}
		}
	}
}*/

/**
 * Copy project dependencies to the project directory.
 */
/*task copyLibraries(
	description: 'Copy subproject dependencies to the project directory',
	type: Copy) {

	dependsOn = []
	destinationDir = file("${project.librariesDir}")
	from(subprojects.configurations.runtime) {
		project.existingLibraries.each { lib ->
			exclude lib
		}
		exclude 'redhorizon-*'
	}
	from(project(':Projects:Red Horizon - Filetypes').projectDir.path + 'Release') {
		include '*.dll'
	}
}*/

/**
 * Recreates what the bundle will expand to, but right in the development
 * directory.
 */
/*task createBundleLayout(
	description: 'Emulate the overall distribution archive',
	dependsOn: [createJavadocs, copyJars, copyLibraries]) {
}*/

/**
 * Creates the distribution archive for standalone downloads, a ZIP file
 * containing: the project JARs, source ZIP, Javadocs, and all required
 * dependencies.
 */
//task createBundle(
//	description: 'Create the overall distribution archive',
//	dependsOn: createBundleLayout,
//	type: Zip) {
//
//	archiveName = "${project.name} ${project.version}.zip"
//	destinationDir = file("${project.distributionsDir}")
//
//	ext.allLibs = []
//	doFirst {
//		allLibs.addAll(files(subprojects.configurations.runtime).files)
//	}
//	from(allLibs) {
//		exclude 'redhorizon-*'
//		into 'Libraries'
//	}
//	from ('.') {
//		include 'Documentation/**/*'
//		include '*.jar'
//		include '*.bat'
//	}
//	into project.name
//}

/**
 * Creates the Utilities distrbution archive for standalone downloads, a ZIP
 * file containing: the project JARs, source ZIP, batch scripts, and all
 * required dependencies.
 */
/*task createUtilitiesBundle(
	description: 'Create the Utilities distribution archive',
	dependsOn: createBundleLayout,
	type: Zip) {

	archiveName = "${project.name} Utilities ${project.version}.zip"
	destinationDir = file("${project.distributionsDir}")

	ext.allLibs = []
	doFirst {
		allLibs.addAll(files(utilitiesProject.configurations.runtime).files)
	}
	from(allLibs) {
		exclude 'redhorizon-*'
		into 'Libraries'
	}
	from ('.') {
		include '*.jar'
		include '*.bat'
	}
	into project.name
}*/
